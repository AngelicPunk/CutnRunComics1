'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*

Modified react-frame-component@0.4.0 which supports an onRender callback (e.g. to measure contents);
Original https://github.com/ryanseddon/react-frame-component/

*/

var hasConsole = typeof window !== 'undefined' && window.console;
var noop = function noop() {};
var swallowInvalidHeadWarning = noop;
var resetWarnings = noop;

if (hasConsole) {
  var originalError = console.error;
  // Rendering a <head> into a body is technically invalid although it
  // works. We swallow React's validateDOMNesting warning if that is the
  // message to avoid confusion
  swallowInvalidHeadWarning = function swallowInvalidHeadWarning() {
    console.error = function (msg) {
      if (/<head>/.test(msg)) return;
      originalError.call(console, msg);
    };
  };
  resetWarnings = function resetWarnings() {
    console.error = originalError;
  };
}

var Frame = _react2.default.createClass({
  displayName: 'Frame',

  propTypes: {
    style: _react2.default.PropTypes.object,
    head: _react2.default.PropTypes.node,
    onRender: _react2.default.PropTypes.func
  },
  render: function render() {
    // The iframe isn't ready so we drop children from props here. #12, #17
    return _react2.default.createElement('iframe', (0, _objectAssign2.default)({}, this.props, { children: undefined }));
  },
  componentDidMount: function componentDidMount() {
    this.renderFrameContents();
  },
  renderFrameContents: function renderFrameContents() {
    var _this = this;

    var doc = _reactDom2.default.findDOMNode(this).contentDocument;
    if (doc && doc.readyState === 'complete') {
      var contents = _react2.default.createElement('div', undefined, this.props.head, this.props.children);

      // React warns when you render directly into the body since browser
      // extensions also inject into the body and can mess up React.
      doc.body.innerHTML = '<div></div>';

      // Clone styles from parent document head into the iframe, so components which use webpack's style-loader get rendered correctly.
      // This doesn't clone any Catalog styles because they are either inline styles or part of the body.
      var pageStyles = Array.from(document.querySelectorAll('head > style'));
      pageStyles.forEach(function (s) {
        doc.body.appendChild(s.cloneNode(true));
      });

      swallowInvalidHeadWarning();
      _reactDom2.default.render(contents, doc.body.firstChild, function () {
        if (_this.props.onRender) {
          (0, _raf2.default)(function () {
            _this.props.onRender(doc.body.firstChild);
          });
        }
      });
      resetWarnings();
    } else {
      setTimeout(this.renderFrameContents, 0);
    }
  },
  componentDidUpdate: function componentDidUpdate() {
    this.renderFrameContents();
  },
  componentWillUnmount: function componentWillUnmount() {
    var doc = _reactDom2.default.findDOMNode(this).contentDocument;
    if (doc) {
      _reactDom2.default.unmountComponentAtNode(doc.body);
    }
  }
});

exports.default = Frame;